import os
import sys
import hashlib
import pefile
import peutils
import csv
import re
import glob
import magic


# MD5 Input & Output Dirs
dataset = "./dataset/clean"
md5sums = "./csv/MD5_Sums.csv"


#CSV Output
csv_file = open(md5sums, "w")

writer = csv.writer(csv_file, delimiter=',')
writer.writerow(["File Name", "MD5 Hash"])


def md5_hash(filename, block_size=65536):
    # Defines how much of a file is stored into memory, increase for higher
    # performance but higher resource usage
    md5 = hashlib.md5()
    with open(filename, 'rb') as f:
        for block in iter(lambda: f.read(block_size), b''):
            md5.update(block)
        return md5.hexdigest()


for subdir, dirs, files in os.walk(dataset):
    for file in files:
        try:
            md5Hash = md5_hash(dataset + '/' + file)

        except Exception as e:
            print("Error calculating MD5, check the provided directory? ")

        else:
            print("Writing MD5 Sums to CSV")
            writer.writerow([file, md5Hash])
csv_file.close()

print("Successfully written MD5 Checksums for all files within provided directory")
